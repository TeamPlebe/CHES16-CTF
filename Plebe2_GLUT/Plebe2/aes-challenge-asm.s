#include <avr/io.h>

	.global algo2
	.global inv_wisa07_asm

	.extern md
	.extern mdinv
	.extern mhp
	.extern mlp
	.extern GLUT_GF16Inv

Mat256To16x16_asm:
	.byte 0x00,0x01,0x26,0x27,0x4a,0x4b,0x6c,0x6d,0x40,0x41,0x66,0x67,0x0a,0x0b,0x2c,0x2d,0x39,0x38,0x1f
	.byte 0x1e,0x73,0x72,0x55,0x54,0x79,0x78,0x5f,0x5e,0x33,0x32,0x15,0x14,0xd1,0xd0,0xf7,0xf6,0x9b,0x9a
	.byte 0xbd,0xbc,0x91,0x90,0xb7,0xb6,0xdb,0xda,0xfd,0xfc,0xe8,0xe9,0xce,0xcf,0xa2,0xa3,0x84,0x85,0xa8
	.byte 0xa9,0x8e,0x8f,0xe2,0xe3,0xc4,0xc5,0x31,0x30,0x17,0x16,0x7b,0x7a,0x5d,0x5c,0x71,0x70,0x57,0x56
	.byte 0x3b,0x3a,0x1d,0x1c,0x08,0x09,0x2e,0x2f,0x42,0x43,0x64,0x65,0x48,0x49,0x6e,0x6f,0x02,0x03,0x24
	.byte 0x25,0xe0,0xe1,0xc6,0xc7,0xaa,0xab,0x8c,0x8d,0xa0,0xa1,0x86,0x87,0xea,0xeb,0xcc,0xcd,0xd9,0xd8
	.byte 0xff,0xfe,0x93,0x92,0xb5,0xb4,0x99,0x98,0xbf,0xbe,0xd3,0xd2,0xf5,0xf4,0xe4,0xe5,0xc2,0xc3,0xae
	.byte 0xaf,0x88,0x89,0xa4,0xa5,0x82,0x83,0xee,0xef,0xc8,0xc9,0xdd,0xdc,0xfb,0xfa,0x97,0x96,0xb1,0xb0
	.byte 0x9d,0x9c,0xbb,0xba,0xd7,0xd6,0xf1,0xf0,0x35,0x34,0x13,0x12,0x7f,0x7e,0x59,0x58,0x75,0x74,0x53
	.byte 0x52,0x3f,0x3e,0x19,0x18,0x0c,0x0d,0x2a,0x2b,0x46,0x47,0x60,0x61,0x4c,0x4d,0x6a,0x6b,0x06,0x07
	.byte 0x20,0x21,0xd5,0xd4,0xf3,0xf2,0x9f,0x9e,0xb9,0xb8,0x95,0x94,0xb3,0xb2,0xdf,0xde,0xf9,0xf8,0xec
	.byte 0xed,0xca,0xcb,0xa6,0xa7,0x80,0x81,0xac,0xad,0x8a,0x8b,0xe6,0xe7,0xc0,0xc1,0x04,0x05,0x22,0x23
	.byte 0x4e,0x4f,0x68,0x69,0x44,0x45,0x62,0x63,0x0e,0x0f,0x28,0x29,0x3d,0x3c,0x1b,0x1a,0x77,0x76,0x51
	.byte 0x50,0x7d,0x7c,0x5b,0x5a,0x37,0x36,0x11,0x10

Mat16x16To256_asm:
	.byte 0x00,0x01,0x5c,0x5d,0xe0,0xe1,0xbc,0xbd,0x50,0x51,0x0c,0x0d,0xb0,0xb1,0xec,0xed,0xff,0xfe,0xa3
	.byte 0xa2,0x1f,0x1e,0x43,0x42,0xaf,0xae,0xf3,0xf2,0x4f,0x4e,0x13,0x12,0xbe,0xbf,0xe2,0xe3,0x5e,0x5f
	.byte 0x02,0x03,0xee,0xef,0xb2,0xb3,0x0e,0x0f,0x52,0x53,0x41,0x40,0x1d,0x1c,0xa1,0xa0,0xfd,0xfc,0x11
	.byte 0x10,0x4d,0x4c,0xf1,0xf0,0xad,0xac,0x08,0x09,0x54,0x55,0xe8,0xe9,0xb4,0xb5,0x58,0x59,0x04,0x05
	.byte 0xb8,0xb9,0xe4,0xe5,0xf7,0xf6,0xab,0xaa,0x17,0x16,0x4b,0x4a,0xa7,0xa6,0xfb,0xfa,0x47,0x46,0x1b
	.byte 0x1a,0xb6,0xb7,0xea,0xeb,0x56,0x57,0x0a,0x0b,0xe6,0xe7,0xba,0xbb,0x06,0x07,0x5a,0x5b,0x49,0x48
	.byte 0x15,0x14,0xa9,0xa8,0xf5,0xf4,0x19,0x18,0x45,0x44,0xf9,0xf8,0xa5,0xa4,0xd6,0xd7,0x8a,0x8b,0x36
	.byte 0x37,0x6a,0x6b,0x86,0x87,0xda,0xdb,0x66,0x67,0x3a,0x3b,0x29,0x28,0x75,0x74,0xc9,0xc8,0x95,0x94
	.byte 0x79,0x78,0x25,0x24,0x99,0x98,0xc5,0xc4,0x68,0x69,0x34,0x35,0x88,0x89,0xd4,0xd5,0x38,0x39,0x64
	.byte 0x65,0xd8,0xd9,0x84,0x85,0x97,0x96,0xcb,0xca,0x77,0x76,0x2b,0x2a,0xc7,0xc6,0x9b,0x9a,0x27,0x26
	.byte 0x7b,0x7a,0xde,0xdf,0x82,0x83,0x3e,0x3f,0x62,0x63,0x8e,0x8f,0xd2,0xd3,0x6e,0x6f,0x32,0x33,0x21
	.byte 0x20,0x7d,0x7c,0xc1,0xc0,0x9d,0x9c,0x71,0x70,0x2d,0x2c,0x91,0x90,0xcd,0xcc,0x60,0x61,0x3c,0x3d
	.byte 0x80,0x81,0xdc,0xdd,0x30,0x31,0x6c,0x6d,0xd0,0xd1,0x8c,0x8d,0x9f,0x9e,0xc3,0xc2,0x7f,0x7e,0x23
	.byte 0x22,0xcf,0xce,0x93,0x92,0x2f,0x2e,0x73,0x72

GF16_Square_asm:
	.byte 0x00,0x01,0x04,0x05,0x03,0x02,0x07,0x06,0x0c,0x0d,0x08,0x09,0x0f,0x0e,0x0b,0x0a

GF16_Mult_asm:
	.byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
	.byte 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
	.byte 0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x03,0x01,0x07,0x05,0x0b,0x09,0x0f,0x0d
	.byte 0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02
	.byte 0x00,0x04,0x08,0x0c,0x03,0x07,0x0b,0x0f,0x06,0x02,0x0e,0x0a,0x05,0x01,0x0d,0x09
	.byte 0x00,0x05,0x0a,0x0f,0x07,0x02,0x0d,0x08,0x0e,0x0b,0x04,0x01,0x09,0x0c,0x03,0x06
	.byte 0x00,0x06,0x0c,0x0a,0x0b,0x0d,0x07,0x01,0x05,0x03,0x09,0x0f,0x0e,0x08,0x02,0x04
	.byte 0x00,0x07,0x0e,0x09,0x0f,0x08,0x01,0x06,0x0d,0x0a,0x03,0x04,0x02,0x05,0x0c,0x0b
	.byte 0x00,0x08,0x03,0x0b,0x06,0x0e,0x05,0x0d,0x0c,0x04,0x0f,0x07,0x0a,0x02,0x09,0x01
	.byte 0x00,0x09,0x01,0x08,0x02,0x0b,0x03,0x0a,0x04,0x0d,0x05,0x0c,0x06,0x0f,0x07,0x0e
	.byte 0x00,0x0a,0x07,0x0d,0x0e,0x04,0x09,0x03,0x0f,0x05,0x08,0x02,0x01,0x0b,0x06,0x0c
	.byte 0x00,0x0b,0x05,0x0e,0x0a,0x01,0x0f,0x04,0x07,0x0c,0x02,0x09,0x0d,0x06,0x08,0x03
	.byte 0x00,0x0c,0x0b,0x07,0x05,0x09,0x0e,0x02,0x0a,0x06,0x01,0x0d,0x0f,0x03,0x04,0x08
	.byte 0x00,0x0d,0x09,0x04,0x01,0x0c,0x08,0x05,0x02,0x0f,0x0b,0x06,0x03,0x0e,0x0a,0x07
	.byte 0x00,0x0e,0x0f,0x01,0x0d,0x03,0x02,0x0c,0x09,0x07,0x06,0x08,0x04,0x0a,0x0b,0x05
	.byte 0x00,0x0f,0x0d,0x02,0x09,0x06,0x04,0x0b,0x01,0x0e,0x0c,0x03,0x08,0x07,0x05,0x0a

GF16_Inv_asm:
	.byte 0x00,0x01,0x09,0x0e,0x0d,0x0b,0x07,0x06,0x0f,0x02,0x0c,0x05,0x0a,0x04,0x03,0x08


// Saves non scratchable registers
.macro SAVE_REGISTERS
	 push r1
	 push r2
	 push r3
     push r4
     push r5
     push r6
     push r7
     push r8
     push r9
     push r10
     push r11
     push r12
     push r13
     push r14
     push r15
	 push r16
	 push r17
     .endm

// Reload non scratchable registers
.macro RESTORE_REGISTERS 
     pop        r17
     pop        r16
     pop        r15
     pop        r14
     pop        r13
     pop        r12
     pop        r11
     pop        r10
     pop        r9
     pop        r8
     pop        r7
     pop        r6
     pop        r5
     pop        r4
	 pop        r3
	 pop        r2
	 pop        r1
     .endm

// r24: d
// r22: md
// r20: mdinv
algo2:
	push	r1
	push	r17

	ldi		r30,lo8(GF16_Inv_asm)
	ldi		r31,hi8(GF16_Inv_asm)	
	movw	r18,r30	
	clr		r17 // a
	mov		r25,r20 // R0=s
	mov		r23,r20 // R1=s
loop:
	eor		r17,r24 // d XOR a
	movw	r30,r18
	add		r30,r17
	adc		r31,r1
	elpm	r21,z // Inv(d XOR a)

	eor		r17,r24 // a

	cp		r17,r22 // a == r?
	breq	label1
	eor		r23,r21
	rjmp	label2
label1:
	eor		r25,r21 // R0 XOR Inv(d XOR a)
	nop
label2:
	inc		r17

	cpi		r17,0x10
	brne	loop

	clr		r21
	cp		r25,r23 //R0==R1?
	brne	label3
	inc		r17 //useless
	rjmp	label4
label3:
	inc		r21
	nop
label4:
	mul		r21,r23
	eor		r0,r25

	mov		r24,r0

	pop		r17
	pop		r1
	ret

// r24-25: &state[i]
// r22-23: &mask_state[i]
inv_wisa07_asm:
	SAVE_REGISTERS

	movw	r6,r24 // r6-7 = &state[i]
	movw	r8,r22 // r8-9 = &mask_state[i]
	movw	r30,r24
	ld		r20,z //state[i]
	movw	r30,r22
	ld		r18,z //mask_state[i]

	ldi		r30,lo8(Mat256To16x16_asm)
	ldi		r31,hi8(Mat256To16x16_asm)
	movw	r16,r30
	add		r30,r20
	adc		r31,r1
	elpm	r10,z //r10-11=state16

	movw	r30,r16
	add		r30,r18
	adc		r31,r1
	elpm	r12,z //r12-13=mask16

	ldi		r30,lo8(GF16_Mult_asm)
	ldi		r31,hi8(GF16_Mult_asm)
	movw	r4,r30 //r4=GF16_Mult
	add		r30,r12
	adc		r31,r1
	elpm	r15,z // mh*ml

	ldi		r16,0xF0
	ldi		r18,0x0F

	mov		r13,r12
	and		r13,r16 // r13 = mh
	and		r12,r18 // r12 = ml

	movw	r30,r4
	add		r30,r10
	adc		r31,r1
	elpm	r17,z // ah*al
	
	mov		r11,r10
	and		r11,r16 // r11 = ah
	and		r10,r18 // r10 = al

	ldi		r30,lo8(GF16_Square_asm)
	ldi		r31,hi8(GF16_Square_asm)
	movw	r2,r30 //r2=GF16_Square
	mov		r16,r11
	lsr		r16
	lsr		r16
	lsr		r16
	lsr		r16
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // ah^2

	ori		r16,0xe0
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // ah^2*e

	eor		r17,r16 // ah^2*e + ah*al

	movw	r30,r2
	add		r30,r10
	adc		r31,r1
	elpm	r16,z // al^2
	eor		r17,r16 // ah^2*e + ah*al + al^2
	
	lds		r16,md
	eor		r17,r16 // ah^2*e + ah*al + al^2 + md

	movw	r30,r4
	mov		r16,r11
	or		r16,r12
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // ah*ml
	eor		r17,r16 // ah^2*e + ah*al + al^2 + md + ah*ml

	movw	r30,r4
	mov		r16,r13
	or		r16,r10
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // mh*al
	eor		r17,r16 // ah^2*e + ah*al + al^2 + md + ah*ml + mh*al

	movw	r30,r2
	mov		r16,r13
	lsr		r16
	lsr		r16
	lsr		r16
	lsr		r16
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // mh^2

	ori		r16,0xe0
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // mh^2*e
	eor		r17,r16 // ah^2*e + ah*al + al^2 + md + ah*ml + mh*al + mh^2*e

	movw	r30,r2
	add		r30,r12
	adc		r31,r1
	elpm	r16,z // ml^2
	eor		r17,r16 // ah^2*e + ah*al + al^2 + md + ah*ml + mh*al + mh^2*e + ml^2

	eor		r17,r15 // d = ah^2*e + ah*al + al^2 + md + ah*ml + mh*al + mh^2*e + ml^2 + mh*ml

	/*mov		r24,r17
	lds		r22,md
	lds		r20,mdinv
	rcall	algo2 // r24 = dinv*/

	ldi		r30,lo8(GLUT_GF16Inv)
	ldi		r31,hi8(GLUT_GF16Inv)
	//mov		r16,r17
	lds		r22,md
	lsl		r22
	lsl		r22
	lsl		r22
	lsl		r22
	lds		r20,mdinv
	add		r31,r17
	add		r30,r22
	adc		r31,r1
	add		r30,r20
	adc		r31,r1
	ld		r24,z


	mov		r16,r11
	or		r16,r24
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r17,z // ah*dinv

	lds		r16,mhp
	eor		r17,r16 // ah*dinv + m'h

	mov		r16,r13
	or		r16,r24
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // mh*dinv
	eor		r17,r16 // ah*dinv+ m'h + mh*dinv

	lds		r15,mdinv
	mov		r16,r15
	or		r16,r11
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z
	eor		r17,r16 // ah*dinv+ m'h + mh*dinv + mdinv*ah

	mov		r16,r15
	or		r16,r13
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z
	eor		r17,r16 // a'h = ah*dinv+ m'h + mh*dinv + mdinv*ah + mdinv*mh

	lsl		r24
	lsl		r24
	lsl		r24
	lsl		r24
	mov		r16,r24
	or		r16,r10
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r14,z // dinv*al

	lds		r16,mlp
	eor		r14,r16 // dinv*al + m'l
	eor		r14,r17 // dinv*al + m'l + a'h

	mov		r16,r24
	or		r16,12
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z //dinv*ml
	eor		r14,r16 // dinv*al + m'l + a'h + dinv*ml

	lsl		r15
	lsl		r15
	lsl		r15
	lsl		r15
	mov		r16,r15
	or		r16,r10
	movw	r30,r4
	add		r30,r16
	adc		r31,r1
	elpm	r16,z // mdinv*al
	eor		r14,r16 // dinv*al + m'l + a'h + dinv*ml + mdinv*al

	lds		r16,mhp
	eor		r14,r16 // dinv*al + m'l + a'h + dinv*ml + mdinv*al + m'h

	or		r15,r12
	movw	r30,r4
	add		r30,r15
	adc		r31,r1
	elpm	r15,z
	eor		r14,r15 // a'l = dinv*al + m'l + a'h + dinv*ml + mdinv*al + m'h + mdinv*ml

	ldi		r30,lo8(Mat16x16To256_asm)
	ldi		r31,hi8(Mat16x16To256_asm)
	movw	r10,r30
	lsl		r17
	lsl		r17
	lsl		r17
	lsl		r17
	or		r17,r14
	add		r30,r17
	adc		r31,r1
	elpm	r17,z 
	movw	r30,r6
	st		z,r17

	movw	r30,r10
	lds		r13,mhp
	lsl		r13
	lsl		r13
	lsl		r13
	lsl		r13
	lds		r12,mlp
	or		r13,r12
	add		r30,r13
	adc		r31,r1
	elpm	r13,z
	movw	r30,r8
	st		z,13

	RESTORE_REGISTERS
	ret

